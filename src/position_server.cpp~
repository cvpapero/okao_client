/*
2014.6.3------------------
認識した人数分の人物位置を一時的に記録しておくモジュール

map<int,point3D>で、okao_idをキーにする

 
*/

#include <ros/ros.h>

#include <map>
#include <string>
#include <sstream>
#include <iostream>

//オリジナルメッセージ
#include "okao_client/OkaoData.h"

#include "okao_client/OkaoPosSrv.h"

using namespace std;

class point3D{
public: 
  int id;
  float x;
  float y;
  float z;
  ros::Time t;
  point3D(){
  }
};

map<int, point3D> dicts;

bool sendData(okao_client::OkaoPosSrv::Request &req,
	      okao_client::OkaoPosSrv::Response &res)
{
  point3D position;
  if(req.rule == "update")
    {
      if(req.req_x && req.req_y && req.req_z)
	{
	  std::cout<< "update! id: " << req.u_id << ", pos(" << req.req_x << "," << req.req_y<<","<<req.req_z<<")" <<std::endl;
	  position.id = req.okao_id;
	  position.x = req.req_x;
	  position.y = req.req_y;      
	  position.z = req.req_z;
	  position.t = ros::Time::now();
	  dicts[ req.u_id ] = position;
	}
      return true;
    }
  else if(req.rule == "request")
    {
      std::cout<< "requast!"<<std::endl;
      res.n = dicts.size();
      res.okao_id = dicts[ req.u_id ].id;
      res.res_x = dicts[ req.u_id ].x;
      res.res_y = dicts[ req.u_id ].y;
      res.res_z = dicts[ req.u_id ].z;
      res.stamp =  dicts[ req.u_id ].t;
      return true;
    }
  else if(req.rule == "allnumreq")
    {
      std::cout<< "allnumreq!"<<std::endl;
      res.n = dicts.size();
      return true;
    }
  else if(req.rule == "allidreq")
    {
      std::cout<< "allidreq!"<<std::endl;
      res.n = dicts.size();
      map<int,point3D>::iterator it = dicts.begin();
      int allid = 0;
      res.allid.resize(dicts.size());
      while(it != dicts.end())
	{
	  res.allid[allid] =  it->first;
	  ++it;
	  ++allid;
	}
      return true;
    }
  else
    {
      std::cout<< "false"<<std::endl;
      return false;
    }
}

int main(int argc, char** argv){

  ros::init(argc, argv, "people_position_server");
  ros::NodeHandle n;

  ros::ServiceServer okaoService = n.advertiseService("OkaoClient_srv",sendData);
  
  ros::spin();
  return 0;
}
